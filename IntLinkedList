package ru.vsuet.list;
import java.util.function.Predicate;

public class IntLinkedList implements IntList {
    private static class Node {
        Node next;
        int data;

        public Node(int data) {
            this.next = null;
            this.data = data;

        }
    }

    private Node head;
    private int size;

    public IntLinkedList() {
        this.head = null;
        this.size = 0;
    }

    @Override
    public int get(int idx) {
        checkIndex(idx);
        idx -= 1;
        Node current = head;
        for (int i = 0; i < idx; ++i) {
            current = current.next;
        }
        return current.data;
    }

    @Override
    public void add(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size += 1;

    }

    private void checkIndex(int idx) {
        if (idx < 1 || idx > size) {
            throw new IndexOutOfBoundsException("Некорректный индекс");
        }
    }

    @Override
    public void add(int idx, int value) {
        checkIndex(idx);
        Node newNode = new Node(value);
        if (idx == 1) {
            newNode.next = head;
            head = newNode;
        } else {
            Node current = head.next;
            for (int i = 2; i < idx - 1; ++i) {
                current = current.next;
            }
            newNode.next = current.next;
            current.next = newNode;
        }
        size += 1;
    }

    @Override
    public void remove(int idx) {
        checkIndex(idx);
        if (idx == 1) {
            head = head.next;
        } else {
            Node current = head.next;
            for (int i = 2; i < idx - 1; ++i) {
                current = current.next;
            }
            if (current.next.next != null) {
                current.next = current.next.next;
            } else {
                current.next = null;
            }

        }
        size -= 1;
    }

    public void removeFirst(Predicate<Integer> condition) {
        Node current = head;
        int idx = 0;
        while (current != null) {
            idx += 1;
            if (condition.test(current.data)) {
                remove(idx);
                break;
            }
            current = current.next;
        }
    }

    public void removeLast(Predicate<Integer> condition) {
        Node current = head;
        int idx = 0;
        int result = -1; //если нет индекса удволетвор. условию поэтому -1
        while (current != null) {
            idx += 1;
            if (condition.test(current.data)) {
                result = idx;
            }
            current = current.next;
        }
        if (result != -1) {
            remove(result);
        }
    }

    @Override
    public void remove(Predicate<Integer> condition) {
        Node current = head;
        while (current != null && current.next != null) {
            if (head.next != null && condition.test(head.data)) {
                head = head.next;
                size -= 1;
                current = head;
            } else {
                if (condition.test(current.next.data)) {
                    current.next = current.next.next;
                    size -= 1;
                } else {
                    current = current.next;
                }
            }
        }
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public String toString() {
        String result = "";
        Node current = head;
        while (current != null) {
            result += current.data + " ";
            current = current.next;
        }
        return result;
    }
}
